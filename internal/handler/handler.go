package handler

import (
	"context"
	"fmt"
	"github.com/sirupsen/logrus"
	"log"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/mymmrac/telego"
	"tg-bot/internal/models"
	"tg-bot/internal/service"
)

type Messenger interface {
	SendMessage(chatID int64, text string)
}

type Handlers struct {
	Bot      *telego.Bot
	Services *service.Service
	states   map[int64]*userState
	mu       sync.RWMutex
}

type userState struct {
	step   string
	event  models.Event
	chatID int64
	events []models.Event
	index  int
}

func NewHandlers(bot *telego.Bot, s *service.Service) *Handlers {
	return &Handlers{
		Bot:      bot,
		Services: s,
		states:   make(map[int64]*userState),
	}
}

func (h *Handlers) Run(ctx context.Context) {
	updates, err := h.Bot.UpdatesViaLongPolling(ctx, nil)
	if err != nil {
		logrus.Errorf("handlers: failed to start updates via long polling: %v", err)
		return
	}
	for {
		select {
		case <-ctx.Done():
			log.Println("handlers: ctx canceled, stopping handlers.Run")
			return
		case update, ok := <-updates:
			if !ok {
				log.Println("handlers: updates channel closed")
				return
			}
			go h.handleUpdate(update)
		}
	}
}

func (h *Handlers) handleUpdate(update telego.Update) {
	if update.CallbackQuery != nil {
		callback := update.CallbackQuery.Data
		// –∏—Å–ø–æ–ª—å–∑—É–µ–º chatID –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (chat id)
		chatID := update.CallbackQuery.From.ID

		if strings.HasPrefix(callback, "join_") {
			idStr := strings.TrimPrefix(callback, "join_")
			eventID, err := strconv.ParseInt(idStr, 10, 64)
			if err != nil {
				h.Send(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è")
				return
			}
			// –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞
			event, err := h.Services.Events.GetByID(eventID)
			if err != nil {
				h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
				return
			}
			// –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º creator_chat_id)
			author, err := h.Services.GetUserById(event.CreatorTgID)
			if err != nil {
				logrus.Infof("Error getting event author: %s", err)
				h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è")
				return
			}
			// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º chatID)
			user, err := h.Services.GetUserById(chatID)
			if err != nil {
				h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
				return
			}
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ
			msg := fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (id=%d) —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É —Å–æ–±—ã—Ç–∏—é: %s", user.Username, user.ChatID, event.Title)
			h.Send(author.ChatID, msg)
			h.Send(chatID, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É—á–∞—Å—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É —Å–æ–±—ã—Ç–∏—è!")
			return
		}
		if strings.HasPrefix(callback, "next_") {
			idStr := strings.TrimPrefix(callback, "next_")
			eventID, err := strconv.ParseInt(idStr, 10, 64)
			if err != nil {
				h.Send(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è")
				return
			}
			h.handleNextCommand(chatID, eventID)
			return
		}
		return
	}

	if update.Message == nil {
		return
	}
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	if strings.HasPrefix(text, "/apply_") {
		idStr := strings.TrimPrefix(text, "/apply_")
		id, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			h.Send(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è")
			return
		}
		h.handleApplyCommand(chatID, id)
		return
	}
	if strings.HasPrefix(text, "/next_") {
		idStr := strings.TrimPrefix(text, "/next_")
		id, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			h.Send(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è")
			return
		}
		h.handleNextCommand(chatID, id)
		return
	}

	switch text {
	case "/start":
		h.handleStart(chatID, update.Message.From.Username)
	case "/create":
		h.handleCreateCommand(chatID)
	case "/events":
		h.handleEventsCommand(chatID)
	case "/my_events":
		h.handleMyEventsCommand(chatID)
	case "/search":
		h.handleSearchCommand(chatID)
	case "/random":
		h.handleRandomCommand(chatID)

	default:
		h.handleUserState(chatID, text)
	}
}
func (h *Handlers) handleSearchCommand(chatID int64) {
	user, err := h.Services.GetUserById(chatID)
	if err != nil {
		h.Send(chatID, "–ü—Ä–∏–≤–µ—Ç, –ì–æ—Å—Ç—å! –¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! \n /start <- –ù–∞–∂–º–∏")
		return
	}

	h.Send(chatID, "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Å–æ–±—ã—Ç–∏–π:")
	h.mu.Lock()
	h.states[user.ChatID] = &userState{step: "search_keyword", chatID: user.ChatID} // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ chatID
	h.mu.Unlock()
}

func (h *Handlers) handleRandomCommand(chatID int64) {
	if _, err := h.Services.GetUserById(chatID); err != nil {
		h.Send(chatID, "–ü—Ä–∏–≤–µ—Ç, –ì–æ—Å—Ç—å! –¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! \n /start <- –ù–∞–∂–º–∏")
		return
	}
	h.sendRandomEvent(chatID)
}
func (h *Handlers) sendRandomEvent(chatID int64) {
	event, err := h.Services.SearchEventRandom()
	if err != nil {
		logrus.Infof("Error getting random event: %s", err)
		h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")
		return
	}
	if event.ID == 0 {
		h.Send(chatID, "–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç")
		return
	}
	months := []string{"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"}
	msg := fmt.Sprintf("–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:\nID: %d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n–î–∞—Ç–∞: %d %s\n–ú–µ—Å—Ç–æ: %s\n–°—Å—ã–ª–∫–∞: %s\n",
		event.ID, event.Title, event.Category, event.Date.Day(), months[event.Date.Month()-1], event.Location, event.URL)
	h.Send(chatID, msg)
}

func (h *Handlers) handleStart(chatID int64, username string) {
	user := models.User{
		Username: username,
		ChatID:   chatID,
	}
	u, err := h.Services.Auth.Create(user)
	if err != nil {
		h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
		return
	}
	h.Send(chatID, fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (id=%d)", user.Username, u))
}

func (h *Handlers) handleCreateCommand(chatID int64) {
	if _, err := h.Services.GetUserById(chatID); err != nil {
		h.Send(chatID, "–ü—Ä–∏–≤–µ—Ç, –ì–æ—Å—Ç—å! –¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! \n /start <- –ù–∞–∂–º–∏")
		return
	}
	h.mu.Lock()
	h.states[chatID] = &userState{step: "title", chatID: chatID}
	h.mu.Unlock()
	h.Send(chatID, "üé¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
}
func (h *Handlers) handleMyEventsCommand(chatID int64) {
	if _, err := h.Services.GetUserById(chatID); err != nil {
		h.Send(chatID, "–ü—Ä–∏–≤–µ—Ç, –ì–æ—Å—Ç—å! –¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! \n /start <- –ù–∞–∂–º–∏")
		return
	}
	h.sendMyEventsList(chatID)
}
func (h *Handlers) handleEventsCommand(chatID int64) {
	if _, err := h.Services.GetUserById(chatID); err != nil {
		h.Send(chatID, "–ü—Ä–∏–≤–µ—Ç, –ì–æ—Å—Ç—å! –¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! \n /start <- –ù–∞–∂–º–∏")
		return
	}
	h.sendEventsList(chatID)
}
func (h *Handlers) handleSearchKeyword(chatID int64, keyword string) {
	events, err := h.Services.SearchEvents(keyword)
	if err != nil {
		logrus.Infof("Error searching events: %s", err)
		h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π üò¢")
		return
	}
	user, err := h.Services.GetUserById(chatID)
	if err != nil {
		logrus.Infof("Error getting user: %s", err)
		h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π üò¢")
		return
	}

	if len(events) == 0 {
		h.Send(chatID, fmt.Sprintf("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: %s", keyword))
		return
	}

	h.mu.Lock()
	h.states[user.ChatID] = &userState{
		step:   "browse_events",
		chatID: user.ChatID,
		events: events,
		index:  0,
	}
	h.mu.Unlock()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
	h.sendEventByIndex(chatID, 0)
}
func (h *Handlers) sendEventByIndex(chatID int64, index int) {
	h.mu.RLock()
	state, ok := h.states[chatID]
	h.mu.RUnlock()
	if !ok || state == nil || index < 0 || index >= len(state.events) {
		h.Send(chatID, "–°–æ–±—ã—Ç–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üîö")
		return
	}

	event := state.events[index]
	msg := fmt.Sprintf("üìå –°–æ–±—ã—Ç–∏–µ %d –∏–∑ %d:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ –î–∞—Ç–∞: %s\nüìç –ú–µ—Å—Ç–æ: %s\nüîó –°—Å—ã–ª–∫–∞: %s",
		index+1, len(state.events),
		event.Title, event.Category,
		event.Date.Format("02.01.2006"), event.Location, event.URL)

	// Inline-–∫–Ω–æ–ø–∫–∏
	buttons := [][]telego.InlineKeyboardButton{
		{
			telego.InlineKeyboardButton{
				Text:         "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É—á–∞—Å—Ç–∏–µ",
				CallbackData: fmt.Sprintf("join_%d", event.ID),
			},
			telego.InlineKeyboardButton{
				Text:         "–°–ª–µ–¥—É—é—â–∏–π",
				CallbackData: fmt.Sprintf("next_%d", event.ID),
			},
		},
	}
	keyboard := telego.InlineKeyboardMarkup{InlineKeyboard: buttons}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ
	h.mu.Lock()
	if s, ok := h.states[chatID]; ok && s != nil {
		s.index = index
		h.states[chatID] = s
	}
	h.mu.Unlock()

	_, err := h.Bot.SendMessage(context.Background(), &telego.SendMessageParams{
		ChatID:      telego.ChatID{ID: chatID},
		Text:        msg,
		ReplyMarkup: &keyboard,
	})
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: %v", err)
	}
}

func (h *Handlers) handleApplyCommand(chatID, eventID int64) {
	if _, err := h.Services.GetUserById(chatID); err != nil {
		h.Send(chatID, "–ü—Ä–∏–≤–µ—Ç, –ì–æ—Å—Ç—å! –¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! \n /start <- –ù–∞–∂–º–∏")
		return
	}
	err := h.Services.RequestJoin(eventID, chatID)
	if err != nil {
		logrus.Infof("Error applying to event: %s", err)
		h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ üò¢")
		return
	}
	h.Send(chatID, fmt.Sprintf("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏ ID %d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", eventID))
}
func (h *Handlers) handleNextCommand(chatID, eventID int64) {
	h.mu.RLock()
	state, ok := h.states[chatID]
	h.mu.RUnlock()
	if !ok || state == nil || len(state.events) == 0 {
		h.Send(chatID, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –í–≤–µ–¥–∏—Ç–µ /search —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ üîç")
		return
	}

	// –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ eventID (–∫–Ω–æ–ø–∫–∞ /next_<id>)
	currentIndex := state.index
	found := false
	for i, ev := range state.events {
		if ev.ID == eventID {
			currentIndex = i
			found = true
			break
		}
	}
	// –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ id, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å

	nextIndex := currentIndex + 1
	if nextIndex >= len(state.events) {
		h.Send(chatID, "–ë–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç üò¢")
		h.mu.Lock()
		delete(h.states, chatID)
		h.mu.Unlock()
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
	h.mu.Lock()
	if s, ok := h.states[chatID]; ok && s != nil {
		s.index = nextIndex
		h.states[chatID] = s
	}
	h.mu.Unlock()

	h.sendEventByIndex(chatID, nextIndex)

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ id –∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	_ = found
}
func (h *Handlers) handleUserState(chatID int64, text string) {
	h.mu.RLock()
	state, ok := h.states[chatID]
	h.mu.RUnlock()
	if !ok || state == nil {
		return
	}

	// –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –∑–∞–ø–∏—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	h.mu.Lock()
	defer h.mu.Unlock()

	// –ù—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç.–∫. —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–≥–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
	state, ok = h.states[chatID]
	if !ok || state == nil {
		return
	}

	switch state.step {
	case "title":
		state.event.Title = text
		state.step = "category"
		h.Send(chatID, "üóÇ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
	case "category":
		state.event.Category = text
		state.step = "description"
		h.Send(chatID, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
	case "search_keyword":
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		// –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏ –≤—ã–∑–æ–≤–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤–Ω–µ lock, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ h.mu
		keyword := text
		delete(h.states, chatID)
		h.mu.Unlock()
		h.handleSearchKeyword(chatID, keyword)
		h.mu.Lock()
	case "choose_action":
		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
		h.Send(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: 1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (/apply_<id>) 2. –°–ª–µ–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç (/next_<id>)")
		// –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		delete(h.states, chatID)
		return
	case "description":
		state.event.Description = text
		state.step = "date"
		h.Send(chatID, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD):")
	case "date":
		parsed, err := time.Parse("2006-01-02", text)
		if err != nil {
			h.Send(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ YYYY-MM-DD")
			return
		}
		state.event.Date = parsed
		state.step = "location"
		h.Send(chatID, "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ:")
	case "location":
		state.event.Location = text
		state.step = "url"
		h.Send(chatID, "üîó –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
	case "url":
		state.event.URL = text
		state.event.CreatedAt = time.Now()
		state.event.UpdatedAt = time.Now()
		evID, err := h.Services.Events.Create(state.event, chatID)
		if err != nil {
			logrus.Infof("Error: %s", err.Error())
			h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
			delete(h.states, chatID)
			return
		}
		h.Send(chatID, fmt.Sprintf("‚úÖ –°–æ–∑–¥–∞–Ω–æ! ID: %d, %s ‚Äî %s", evID, state.event.Title, state.event.Location))
		delete(h.states, chatID)
	}
}

func (h *Handlers) sendEventsList(chatID int64) {
	events, err := h.Services.Events.GetEvents()
	if err != nil {
		logrus.Infof("Error getting events: %s", err)
		h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π")
		return
	}
	if len(events) == 0 {
		h.Send(chatID, "–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç")
		return
	}
	months := []string{"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"}
	for i, event := range events {
		msg := fmt.Sprintf("–°–æ–±—ã—Ç–∏–µ %d:\nID: %d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n–î–∞—Ç–∞:%d %s\n–ú–µ—Å—Ç–æ: %s\n–°—Å—ã–ª–∫–∞: %s\n",
			i+1, event.ID, event.Title, event.Category, event.Date.Day(), months[event.Date.Month()-1], event.Location, event.URL)
		h.Send(chatID, msg)
	}
}
func (h *Handlers) sendMyEventsList(chatID int64) {
	events, err := h.Services.Events.GetMyEvents(chatID)
	if err != nil {
		logrus.Infof("Error getting events: %s", err)
		h.Send(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π")
		return
	}
	if len(events) == 0 {
		h.Send(chatID, "–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç")
		return
	}
	h.Send(chatID, fmt.Sprintf("–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è (–≤—Å–µ–≥–æ: %d):\n", len(events)))
	for i, event := range events {
		msg := fmt.Sprintf("–°–æ–±—ã—Ç–∏–µ %d:\nID: %d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n–î–∞—Ç–∞: %s\n–ú–µ—Å—Ç–æ: %s\n–°—Å—ã–ª–∫–∞: %s\n",
			i+1, event.ID, event.Title, event.Category, event.Date.Format("02.01.2006"), event.Location, event.URL)
		h.Send(chatID, msg)
	}
}

// Send ‚Äî –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func (h *Handlers) Send(chatID int64, text string) {
	_, err := h.Bot.SendMessage(
		context.Background(), // üëà –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
		&telego.SendMessageParams{
			ChatID: telego.ChatID{ID: chatID},
			Text:   text,
		},
	)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
	}
}
